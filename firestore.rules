rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Allow reading any profile, but only allow users to edit their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Quotes: Allow reading by anyone, but only authenticated users can create.
    // Only the original author can update or delete their quote.
    match /quotes/{quoteId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.resource.data.authorId == request.auth.uid;
    }

    // Bookings: Users can only manage their own bookings.
    // Clients can create/view their own, Therapists can view theirs.
    match /bookings/{bookingId} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.therapistId);
      allow create: if request.auth != null && request.resource.data.clientId == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid == resource.data.therapistId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.clientId;
    }

    // Chats: Participants can read/write messages in a chat.
    match /chats/{chatId} {
      allow read, update, create: if request.auth != null && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        allow update: if request.auth != null && request.resource.data.senderId == request.auth.uid;
      }
    }
  }
}
