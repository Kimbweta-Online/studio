rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users Collection
    // - Allow anyone authenticated to read user profiles (needed for therapist/client lists)
    // - Allow users to create their own user document upon signup
    // - Allow users to update only their own document
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Generally, don't allow users to delete their accounts directly
    }

    // Quotes Collection
    // - Allow any authenticated user to read all quotes
    // - Allow any authenticated user to create a quote (in the app, this is limited to therapists)
    match /quotes/{quoteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if false; // For simplicity, prevent editing/deleting for now
    }

    // Bookings Collection
    // - Users can only read/write bookings where they are either the client or the therapist
    match /bookings/{bookingId} {
      allow read, write: if isAuthenticated() && (
        isOwner(resource.data.clientId) || isOwner(resource.data.therapistId)
      );
    }

    // Chats Collection
    // - Allow read/write access only to participants of the chat
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participants;

      // Messages Subcollection
      // - Allow participants to read messages
      // - Allow the sender to create/update messages
      match /messages/{messageId} {
        allow read: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        allow create: if isAuthenticated() && isOwner(request.resource.data.senderId);
        allow update: if isAuthenticated() && isOwner(existing_resource.data.senderId); // Only original sender can update
        allow delete: if false; // Soft delete (updating text) is handled by the update rule
      }
    }
  }
}