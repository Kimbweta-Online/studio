
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection:
    // - Authenticated users can see profiles (for therapist lists).
    // - A user can only create/update their own document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Quotes Collection:
    // - Authenticated users can read quotes.
    // - Authenticated users (therapists/admins via app logic) can create/update/delete their own quotes.
    match /quotes/{quoteId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (request.auth.uid == resource.data.authorId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Bookings Collection:
    // - Admin can read/delete any booking.
    // - Read access if you are the client or therapist.
    // - Create access if you are the client making the request.
    // - Update access (status changes) only for the therapist.
    // - Delete (cancel) access for the client who made it or the therapist involved.
    match /bookings/{bookingId} {
      function isOwner() {
        return request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.therapistId;
      }
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow read: if request.auth != null && (isOwner() || isAdmin());
      allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId;
      allow update: if request.auth != null && (request.auth.uid == resource.data.therapistId || isAdmin());
      allow delete: if request.auth != null && (isOwner() || isAdmin());
    }
    
    // AI Chats Collection:
    // - User can only access their own AI chats.
    // - Admin can view any AI chat for moderation.
    match /ai_chats/{chatId} {
      allow read, write, delete: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Chats & Messages Subcollection:
    // - Users can only access chats they are a part of.
    // - Users can only write messages to chats they are a part of.
    // - Admin can access any chat.
    match /chats/{chatId} {
      function isParticipant() {
        return request.auth.uid in resource.data.participants;
      }
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow read, write: if request.auth != null && (isParticipant() || isAdmin());
      
      match /messages/{messageId} {
        // Allow read/create if the user is a participant of the parent chat document or an admin.
        allow read, create: if request.auth != null && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        // Allow a user to 'delete' (update) only their own messages.
        allow update: if request.auth != null && request.auth.uid == resource.data.senderId;
      }
    }
  }
}
