rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can be read by any authenticated user, but only updated by the user themselves.
    match /users/{userId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update, delete: if request.auth.uid == userId;
    }

    // Quotes can be read by anyone, but only created by authenticated users.
    // Updates/deletes are restricted to the original author.
    match /quotes/{quoteId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.authorId;
    }

    // Bookings can only be read or created by the client or therapist involved.
    match /bookings/{bookingId} {
      allow read, write: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.therapistId;
      allow create: if request.auth.uid == request.resource.data.clientId;
    }

    // Chat documents can be read or written to by participants only.
    match /chats/{chatId} {
      allow read, update, delete: if request.auth.uid in resource.data.participants;
      allow create: if request.auth.uid in request.resource.data.participants;

      // Messages within a chat can be read by participants and created by the sender.
      match /messages/{messageId} {
        allow read: if get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        allow create: if request.auth.uid == request.resource.data.senderId && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        allow update, delete: if request.auth.uid == resource.data.senderId;
      }
    }
  }
}
